{"version":3,"sources":["Components/Scroll.js","Components/SearchBox.js","Components/Card.js","Components/CardList.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","CardList","Knicks","map","user","i","key","App","OnSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","knick","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAUeA,EARA,SAACC,GAEf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,UACnEJ,EAAMK,WCYMC,EAhBG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAE/B,OACC,yBAAKC,UAAW,OAChB,2BACAA,UAAY,mCACZC,KAAO,SACPC,YAAc,iBACdC,SAAWJ,MCOEK,G,MAfH,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GAC3B,OACE,yBAAKP,UAAY,oDAChB,yBAAKQ,IAAK,SAASC,IAAG,+BAA2BF,EAA3B,mBACtB,6BACA,gCAAMF,EAAN,KACA,+BAAKC,EAAL,SCkBYI,EAvBC,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACjB,OACA,6BAGAA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACA,kBAAC,EAAD,CACAC,IAAMD,EACNP,GAAMI,EAAOG,GAAGP,GAChBF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCyCJU,E,YA/Cd,aAAc,IAAD,8BACZ,+CAgBDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACrB,YAAaoB,EAAME,OAAOC,SAhB1C,EAAKC,MAAQ,CACbX,OAAQ,GACRb,YAAc,IAJD,E,iFAWO,IAAD,OAClByB,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACR,OAAOgB,S,+BAO3B,IAAD,EACoBC,KAAKN,MAA1BX,EADC,EACDA,OAAOb,EADN,EACMA,YACR+B,EAAgBlB,EAAOmB,QAAO,SAAAC,GACnC,OAAOA,EAAM1B,KAAK2B,cAAcC,SAASnC,EAAYkC,kBAEvD,OAAIrB,EAAOuB,OAKX,yBAAKlC,UAAW,MAChB,wBAAIA,UAAU,MAAd,4BACA,kBAAC,EAAD,CAAWD,aAAe6B,KAAKX,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUN,OAAQkB,MARV,yD,GA5BSM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SDwHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.47185165.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\t\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height:'800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n);\r\n};\r\nexport default Scroll; ","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\r\n\treturn (\r\n\t\t<div className ='pa2'>\r\n\t\t<input\r\n\t\tclassName = 'pa3 ba b--orange bg-darkest-blue'\r\n\t\ttype = 'search' \r\n\t\tplaceholder = 'search players' \r\n\t\tonChange ={searchChange}\r\n\t\t/>\r\n</div>\r\n\r\n\t\t);\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card =({name, email, id})=>{\r\nreturn (\r\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt= 'robots' src ={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<div> \r\n\t\t\t<h2> {name} </h2>\r\n\t\t\t<p> {email} </p>\r\n\r\n\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t); \r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({Knicks})=> {\r\n\treturn (\r\n\t<div>\r\n\r\n{\r\n\tKnicks.map((user,i) => {\r\n\t\treturn (\r\n\t\t<Card \r\n\t\tkey ={i} \r\n\t\tid = {Knicks[i].id} \r\n\t\tname={Knicks[i].name} \r\n\t\temail={Knicks[i].email}\r\n\t\t/>\r\n\t\t); \r\n\t})\r\n}\r\n\t</div> \r\n\r\n\t\t);\r\n}\r\n\r\n\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Scroll from '../Components/Scroll';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport CardList from '../Components/CardList';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\tthis.state = {\r\n\tKnicks: [],  \r\n\tsearchfield : ''\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('http://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=> this.setState({Knicks:users}));\r\n}\r\n\r\n\tOnSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t}\r\n\r\n\trender() {\r\n\t\tconst {Knicks,searchfield} =this.state;\r\n\t\tconst filteredRobots =Knicks.filter(knick=>{\r\n\t\t\treturn knick.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\tif(!Knicks.length){\r\n\t\treturn <h1> Loading the players </h1>\r\n\r\n\t} else{\r\n\treturn (\r\n\t<div className ='tc'>\r\n\t<h1 className='f1'> New York Knicks Roster </h1>\r\n\t<SearchBox searchChange ={this.OnSearchChange}/>\r\n\t<Scroll>\r\n\t<CardList Knicks={filteredRobots}/>\r\n\t</Scroll>\r\n\t</div>\r\n\r\n);\r\n}\r\n}\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport {Knicks} from './robots';\n\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(<App/>,document.getElementById('root'));\n\n\nserviceWorker.unregister();\n "],"sourceRoot":""}